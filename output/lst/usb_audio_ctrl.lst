C51 COMPILER V9.00   USB_AUDIO_CTRL                                                        05/16/2015 15:55:47 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE USB_AUDIO_CTRL
OBJECT MODULE PLACED IN .\output\obj\usb_audio_ctrl.obj
COMPILER INVOKED BY: d:\Keil C51\C51\BIN\C51.EXE device\usb_audio_ctrl.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE) BROWSE IN
                    -CDIR(.\config;.\device;.\display;.\fs;.\key;.\lib_if;.\play;.\system;.\library;.\power;.\radio;.\eeprom;.\spi_flash;.\sl
                    -ave;.\bluetooth;.\i2c) DEBUG PRINT(.\output\lst\usb_audio_ctrl.lst) OBJECT(.\output\obj\usb_audio_ctrl.obj)

line level    source

   1          #include "syscfg.h"
   2          #include "sysctrl.h"
   3          #include "audio_stream.h"
   4          #include "device_audio.h"
   5          #include "device_hcd.h"
   6          //#include "display.h"
   7          #include "breakpoint.h"
   8          //#include "24cxx.h"
   9          #include "user_interface.h"
  10          #include "debug.h"
  11          #include "sys_on_off.h"
  12          
  13          
  14          #if (defined(FUNC_AUDIO_EN) || defined(FUNC_READER_EN) || defined(FUNC_AUDIO_READER_EN))
  15          
  16          //单独的声卡模式，使用下面的VID、PID
  17          WORD AudioVID = 0x0000;
  18          WORD AudioPID = 0x0106;
  19          
  20          //一线通模式，使用下面的VID、PID
  21          WORD AudioReaderVID = 0x0000;
  22          WORD AudioReaderPID = 0x0108;
  23          
  24          //单独的声卡模式或一线通模式，都是使用下面的STRING
  25          BYTE* AudioString_Manu = "MVSILICON.INC.";                      //max length: 32bytes
  26          BYTE* AudioString_Product = "MV USB AUDIO";                     //max length: 32bytes
  27          BYTE* AudioString_SerialNumber = "2011090112345";       //max length: 32bytes
  28          
  29          
  30          
  31          //做USB声卡时的音量调节方案是：
  32          //1. 最终DAC输出的音量为本地音量值gVolArr[gSys.Volume]与PC端音量的相乘后的结果。
  33          //       所以本地通过按键调节gSys.Volume可以改变音量，PC端调节音量也可以改变音量。
  34          //2. 当在PC端调节“扬声器”音量时，PC会发命令通知USB声卡将音量设置为指定值，
  35          //       声卡驱动将该音量值保存于AudioLeftVolume和AudioRightVolume变量中，
  36          //       然后调用DeviceAudioSetVolume()函数完成音量的设置。
  37          //3. 左右声道的音量值分别调节，PC端的balance调节实际就是对USB声卡的左右声道分别设置不同音量值。
  38          //4. 当USB声卡刚连接到PC时，USB声卡会将AudioLeftVolume和AudioRightVolume的值返回给PC，做为初始默认音量。
  39          
  40          
  41          //下面两个变量缓存PC端的音量值
  42          WORD AudioLeftVolume = AUDIO_MAX_VOLUME / 10;           //PC端默认音量为最大音量的10%
  43          WORD AudioRightVolume = AUDIO_MAX_VOLUME / 10;  //PC端默认音量为最大音量的10%
  44          
  45          
  46          
  47          //下面几个函数供AudioStreamProcess()函数回调
  48          
  49          //设置音量，PC端调节“扬声器---音量”、“扬声器---平衡”时会调用到这个函数。
  50          VOID DeviceAudioSetVolume(VOID)
  51          {
  52   1              extern WORD     CODE gVolArr[];
  53   1              WORD LeftVolume;
C51 COMPILER V9.00   USB_AUDIO_CTRL                                                        05/16/2015 15:55:47 PAGE 2   

  54   1              WORD RightVolume;
  55   1              
  56   1              LeftVolume = ((DWORD)AudioLeftVolume) * gVolArr[gSys.Volume] / AUDIO_MAX_VOLUME;
  57   1              RightVolume = ((DWORD)AudioRightVolume) * gVolArr[gSys.Volume] / AUDIO_MAX_VOLUME;
  58   1              InDacSetVolume(LeftVolume, RightVolume);
  59   1      //      DBG(("AudioLeftVolume:%d, AudioRightVolume:%d, gVolArr[%bd]:%d, LeftVolume:%d, RightVolume:%d\n", Audio
             -LeftVolume, AudioRightVolume, gSys.Volume, gVolArr[gSys.Volume], LeftVolume, RightVolume));
  60   1      #ifdef FUNC_BREAK_POINT_EN
  61   1              BP_SaveInfo(&gBreakPointInfo.PowerMemory.Volume, sizeof(gBreakPointInfo.PowerMemory.Volume));
  62   1      #endif
  63   1      }
  64          
  65          
  66          //静音使能，PC端调节“扬声器---全部静音”时会调用到这个函数。
  67          VOID DeviceAudioMuteEn(VOID)
  68          {
  69   1              InDacSetVolume(0, 0);
  70   1      }
  71          
  72          
  73          //静音取消，PC端调节“扬声器---全部静音”时会调用到这个函数。
  74          VOID DeviceAudioMuteDis(VOID)
  75          {
  76   1              DeviceAudioSetVolume();
  77   1              UnMute();
  78   1              gSys.MuteFg = FALSE;
  79   1      }
  80          
  81          
  82          //设备配置好
  83          VOID DeviceAudioConfigOK(VOID)
  84          {
  85   1              AudioStreamInit();
  86   1              SetChipWorkOnAudioMode();
  87   1              SetIntEnBit(MASK_INT_OTG_MC);   
  88   1      }
  89          
  90          
  91          //initial usb audio device. 
  92          BOOL DeviceAudioCtrlInit(VOID)
  93          {               
  94   1              DeviceAudioInit();
  95   1              DeviceAudioSetVolume();
  96   1              UnMute();
  97   1              gSys.MuteFg = FALSE;
  98   1              gAudioState = AUDIO_INIT;
  99   1      #ifdef FUNC_BREAK_POINT_EN
 100   1              BP_SaveInfo(&gBreakPointInfo.PowerMemory.SystemMode, sizeof(gBreakPointInfo.PowerMemory.SystemMode));
 101   1      #endif
 102   1              return TRUE;
 103   1      
 104   1      #ifdef FUNC_USB_VOLUP_EN
              
                      USB_VOLUP_Off();//usb状态下给个高
                                      
              #endif          
 109   1      }
 110          
 111          
 112          //end usb audio device.
 113          VOID DeviceAudioCtrlEnd(VOID)
 114          {       
C51 COMPILER V9.00   USB_AUDIO_CTRL                                                        05/16/2015 15:55:47 PAGE 3   

 115   1              UsbDeviceDisConnect();
 116   1              ClrIntEnBit(MASK_INT_OTG_MC);
 117   1      }
 118          
 119          
 120          //usb audio device state control.
 121          VOID DeviceAudioStateCtrl(VOID)
 122          {       
 123   1              BYTE Event = MessageGet(MSG_FIFO_KEY);
 124   1      
 125   1              //DBG(("Event;%bx\n",Event));
 126   1              if(gAudioState != AUDIO_INIT)
 127   1              {// Audio初始化成功后再响应按键命令.
 128   2                      if(Event == MSG_VOL_ADD)
 129   2                      {               
 130   3                              VolumeAdjust(UP);
 131   3                      }
 132   2                      else if(Event == MSG_VOL_SUB)
 133   2                      {               
 134   3                              VolumeAdjust(DOWN);
 135   3                      }
 136   2                      else if((Event == MSG_PLAY_PAUSE) || (Event == MSG_PLAY_1))
 137   2                      {
 138   3                              DBG(("MSG_PAUSE\n"));
 139   3                              DeviceAudioSendPcCmd(PC_CMD_PLAY_PAUSE);
 140   3                      }
 141   2                      else if(Event == MSG_STOP)
 142   2                      {
 143   3                              DBG(("MSG_STOP\n"));
 144   3                              DeviceAudioSendPcCmd(PC_CMD_STOP);
 145   3                      }
 146   2                      else if(Event == MSG_NEXT)
 147   2                      {
 148   3                              DBG(("MSG_NEXT\n"));
 149   3                              DeviceAudioSendPcCmd(PC_CMD_NEXT);
 150   3                      }
 151   2                      else if(Event == MSG_PRE)
 152   2                      {
 153   3                              DBG(("MSG_PRE\n"));
 154   3                              DeviceAudioSendPcCmd(PC_CMD_PRE);
 155   3                      }
 156   2                      else if(Event == MSG_MUTE)
 157   2                      {               
 158   3                              MuteStatusChange();
 159   3                              DBG(("MSG_MUTE,gSys.MuteFg:%bd\n", gSys.MuteFg));
 160   3                              DeviceAudioSendPcCmd(PC_CMD_MUTE);
 161   3                      }
 162   2      #ifdef FUN_SYSTEM_POWEROFF_WAIT_TIME
                              SystemOffTimeMsgPro(Event);
              #endif
 165   2              }
 166   1              
 167   1              //USB控制命令处理
 168   1              DeviceAudioRequestProcess();
 169   1      
 170   1              //USB ISO数据包处理
 171   1              AudioStreamProcess();
 172   1      }
 173          
 174          
 175          #endif

C51 COMPILER V9.00   USB_AUDIO_CTRL                                                        05/16/2015 15:55:47 PAGE 4   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    346    ----
   CONSTANT SIZE    =     42    ----
   XDATA SIZE       =     21       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
